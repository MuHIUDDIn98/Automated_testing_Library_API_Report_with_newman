{
	"info": {
		"_postman_id": "14155408-857e-4cd7-ace1-42aacb6b01c7",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31255357",
		"_collection_link": "https://www.postman.com/cloudy-escape-636778/workspace/my-testing-workspace/collection/31255357-14155408-857e-4cd7-ace1-42aacb6b01c7?action=share&source=collection_link&creator=31255357"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"ID\",jsonData.ID)\r",
							"\r",
							"const schema1 = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Msg\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"ID\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Msg\",\r",
							"    \"ID\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"console.log(jsonData.ID);\r",
							"\r",
							"pm.test(\"Validation of status code 200\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"\r",
							"})\r",
							"\r",
							"//json schema validation\r",
							"pm.test(\"Validation of response jason schema\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema1);\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"validation of successfully added\",function(){\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"Msg\");\r",
							"    pm.expect(jsonData).to.have.property(\"ID\");\r",
							"    pm.expect(jsonData.Msg).to.equal(\"successfully added\")\r",
							"\r",
							"})\r",
							"\r",
							"//response time\r",
							"pm.test(\"Validation of Respose time below 1600\", function(){\r",
							"\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1600);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//creating a companyCode in collection variable\r",
							"const companyCode = pm.collectionVariables.get(\"CompanyCode\");\r",
							"\r",
							"const intval = pm.variables.replaceIn('{{$randomInt}}');\r",
							"//setting environment variable isbn\r",
							"pm.environment.set(\"isbn\",companyCode+intval);\r",
							"//setting aisle random number\r",
							"const aisle = pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.environment.set(\"aisle\",aisle);\r",
							"//creating author 1st name and last name\r",
							"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"var lastName  = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"var Author_name = firstName +\" \"+ lastName;\r",
							"\r",
							"//setting author \r",
							"pm.environment.set(\"Author_name\",Author_name)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"name\":\"Python for Ethical Hacking\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"{{aisle}}\",\r\n\"author\":\"{{Author_name}}\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/Library/Addbook.php",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"const schema = \r",
							"{\r",
							"\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validating status code 200\r",
							"pm.test(\"Validation of status code 200\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"\r",
							"})\r",
							"\r",
							"//json schema validation\r",
							"pm.test(\"Validation of response jason schema\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"validation of  aisle and Author name \" ,function(){\r",
							"\r",
							"    var author = pm.environment.get(\"Author_name\");\r",
							"    pm.expect(jsonData[0].author).to.equal(author);\r",
							"\r",
							"    var I = pm.environment.get(\"aisle\");\r",
							"    pm.expect(jsonData[0].aisle).to.equal(I);\r",
							"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/Library/GetBook.php?ID={{ID}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookByAuthor",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/Library/GetBook.php?AuthorName={{Author_name}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "AuthorName",
							"value": "{{Author_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBookByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json()\r",
							"\r",
							"pm.test(\"validation of successfully deleted\",function(){\r",
							"    pm.expect(jsonResponse.msg).to.equal(\"book is successfully deleted\");\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Validation of status code 200\", function(){\r",
							" pm.response.to.have.status(200);\r",
							"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"ID\" : \"{{ID}}\"\r\n \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/Library/DeleteBook.php",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CompanyCode",
			"value": "YC",
			"type": "string"
		},
		{
			"key": "isbn",
			"value": ""
		},
		{
			"key": "aisle",
			"value": ""
		},
		{
			"key": "Author_name",
			"value": ""
		}
	]
}